const test = require('tape')

const arrayToList = require('../List/arrayToList')
const eitherToAsync = require('../Async/eitherToAsync')
const eitherToFirst = require('../First/eitherToFirst')
const eitherToLast = require('../Last/eitherToLast')
const eitherToMaybe = require('../Maybe/eitherToMaybe')
const eitherToResult = require('../Result/eitherToResult')
const firstToAsync = require('../Async/firstToAsync')
const firstToEither = require('../Either/firstToEither')
const firstToLast = require('../Last/firstToLast')
const firstToMaybe = require('../Maybe/firstToMaybe')
const firstToResult = require('../Result/firstToResult')
const lastToAsync = require('../Async/lastToAsync')
const lastToEither = require('../Either/lastToEither')
const lastToFirst = require('../First/lastToFirst')
const lastToMaybe = require('../Maybe/lastToMaybe')
const lastToResult = require('../Result/lastToResult')
const listToArray = require('../List/listToArray')
const maybeToAsync = require('../Async/maybeToAsync')
const maybeToEither = require('../Either/maybeToEither')
const maybeToFirst = require('../First/maybeToFirst')
const maybeToLast = require('../Last/maybeToLast')
const maybeToResult = require('../Result/maybeToResult')
const resultToAsync = require('../Async/resultToAsync')
const resultToEither = require('../Either/resultToEither')
const resultToFirst = require('../First/resultToFirst')
const resultToLast = require('../Last/resultToLast')
const resultToMaybe = require('../Maybe/resultToMaybe')
const writerToPair = require('../Pair/writerToPair')

test('logic entry', t => {

    t.equal(arrayToList, arrayToList, 'provides the arrayToList transform')
    t.equal(eitherToAsync, eitherToAsync, 'provides the eitherToAsync transform')
    t.equal(eitherToFirst, eitherToFirst, 'provides the eitherToFirst transform')
    t.equal(eitherToLast, eitherToLast, 'provides the eitherToLast transform')
    t.equal(eitherToMaybe, eitherToMaybe, 'provides the eitherToMaybe transform')
    t.equal(eitherToResult, eitherToResult, 'provides the eitherToResult transform')
    t.equal(firstToAsync, firstToAsync, 'provides the firstToAsync transform')
    t.equal(firstToEither, firstToEither, 'provides the firstToEither transform')
    t.equal(firstToLast, firstToLast, 'provides the firstToLast transform')
    t.equal(firstToMaybe, firstToMaybe, 'provides the firstToMaybe transform')
    t.equal(firstToResult, firstToResult, 'provides the firstToResult transform')
    t.equal(lastToAsync, lastToAsync, 'provides the lastToAsync transform')
    t.equal(lastToEither, lastToEither, 'provides the lastToEither transform')
    t.equal(lastToFirst, lastToFirst, 'provides the lastToFirst transform')
    t.equal(lastToMaybe, lastToMaybe, 'provides the lastToMaybe transform')
    t.equal(lastToResult, lastToResult, 'provides the lastToResult transform')
    t.equal(listToArray, listToArray, 'provides the listToArray transform')
    t.equal(maybeToAsync, maybeToAsync, 'provides the maybeToAsync transform')
    t.equal(maybeToEither, maybeToEither, 'provides the maybeToEither transform')
    t.equal(maybeToFirst, maybeToFirst, 'provides the maybeToFirst transform')
    t.equal(maybeToLast, maybeToLast, 'provides the maybeToLast transform')
    t.equal(maybeToResult, maybeToResult, 'provides the maybeToResult transform')
    t.equal(resultToAsync, resultToAsync, 'provides the resultToAsync transform')
    t.equal(resultToEither, resultToEither, 'provides the resultToEither transform')
    t.equal(resultToFirst, resultToFirst, 'provides the resultToFirst transform')
    t.equal(resultToLast, resultToLast, 'provides the resultToLast transform')
    t.equal(resultToMaybe, resultToMaybe, 'provides the resultToMaybe transform')
    t.equal(writerToPair, writerToPair, 'provides the writerToPair transform')
  
    t.end()
})  
